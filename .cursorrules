# Cursor Rules for 旅游全程追踪系统 (Travel Tracking System)

# 项目基本信息
这是一个基于FastAPI和SQLAlchemy的旅游全程追踪后端系统，为用户提供旅游行前、行中、行后的全过程追踪和帮助。

## 技术栈
- Python 3.10+
- FastAPI (异步Web框架)
- SQLAlchemy (ORM)
- Pydantic (数据验证)
- JWT认证
- SQLite/PostgreSQL数据库

## 代码规范

### Python代码风格
- 遵循PEP 8代码规范
- 使用类型提示(Type Hints)
- 行长度限制为120字符
- 使用4个空格缩进
- 函数和类名使用描述性命名

### 导入顺序
1. 标准库导入
2. 第三方库导入
3. 本地应用导入
4. 相对导入

示例：
```python
# 标准库
from datetime import datetime
from typing import Optional, List

# 第三方库
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel

# 本地导入
from app.core.database import get_db
from app.models.user import User
```

### 文档字符串
- 使用中文注释，便于中文开发团队理解
- 所有函数和类都应该有docstring
- API端点必须包含summary和详细描述

示例：
```python
async def create_travel_plan(
    plan_data: TravelPlanCreate,
    current_user: User = Depends(get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    """创建新的旅行计划
    
    Args:
        plan_data: 旅行计划数据
        current_user: 当前登录用户
        db: 数据库会话
        
    Returns:
        TravelPlanResponse: 创建的旅行计划信息
        
    Raises:
        HTTPException: 创建失败时抛出异常
    """
```

### 错误处理
- 使用FastAPI的HTTPException处理API错误
- 错误信息使用中文，便于用户理解
- 统一错误状态码使用

示例：
```python
if not user:
    raise HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail="用户不存在"
    )
```

### 数据库模型
- 所有表名使用复数形式（users, travel_plans）
- 字段名使用snake_case
- 必须包含created_at和updated_at时间戳
- 外键关系明确定义

### API设计
- RESTful API设计
- 使用合适的HTTP方法（GET、POST、PUT、DELETE）
- API版本控制（/api/v1/）
- 统一的响应格式

### 安全性
- 所有需要认证的端点使用JWT token验证
- 密码使用bcrypt加密
- 输入数据使用Pydantic验证
- SQL注入防护

## 项目结构规范

### 目录组织
```
app/
├── api/v1/              # API路由
│   ├── endpoints/       # 具体端点实现
│   └── router.py       # 路由汇总
├── core/               # 核心配置
│   ├── config.py      # 应用配置
│   ├── database.py    # 数据库配置
│   └── security.py    # 安全认证
├── models/            # SQLAlchemy模型
├── schemas/           # Pydantic模型
└── __init__.py
```

### 文件命名
- 模块文件使用snake_case
- 类名使用PascalCase
- 函数名使用snake_case
- 常量使用UPPER_CASE

## 开发指导

### 新增功能流程
1. 在models/中定义数据库模型
2. 在schemas/中定义Pydantic模型
3. 在api/v1/endpoints/中创建API端点
4. 在router.py中注册路由
5. 更新README.md文档

### 数据库操作
- 使用异步数据库操作
- 事务管理要明确
- 查询优化，避免N+1问题

### 测试
- 为新功能编写单元测试
- API端点测试使用FastAPI的TestClient
- 数据库测试使用测试数据库

## 特殊注意事项

### 旅游业务逻辑
- 旅行计划状态管理：planning -> confirmed -> in_progress -> completed
- 费用分类要全面：交通、住宿、餐饮、门票、购物、娱乐、保险、签证
- 行程安排要考虑时间顺序和地理位置
- 日志隐私设置：private/public/friends

### 性能优化
- 使用异步编程提高并发性能
- 数据库查询优化，合理使用索引
- 大文件上传使用流式处理
- API响应分页处理

### 国际化考虑
- 支持多种货币
- 时区处理
- 多语言支持预留接口

## 代码提示

当编写API端点时，请遵循以下模式：
1. 导入必要的依赖
2. 定义路由装饰器和响应模型
3. 添加中文summary和描述
4. 参数验证和权限检查
5. 业务逻辑处理
6. 错误处理
7. 返回响应

当编写数据库模型时：
1. 继承Base类
2. 定义表名
3. 定义字段（包含主键、外键、索引）
4. 添加关系定义
5. 包含时间戳字段

遵循这些规则将确保代码质量和项目的可维护性。 