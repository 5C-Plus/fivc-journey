---
description: 
globs: 
alwaysApply: false
---
# 开发工作流规则

## 项目启动
- 使用 `make dev` 启动开发服务器
- 开发服务器运行在 `http://0.0.0.0:8000`
- 支持热重载，修改代码自动重启

## 依赖管理
- 使用 `uv` 作为包管理器，比 pip 更快
- `make install` - 安装基础依赖
- `make install-dev` - 安装开发依赖
- `make update` - 更新所有依赖
- 依赖配置在 [pyproject.toml](mdc:pyproject.toml) 中

## 代码质量工作流
### 基础格式化
- `make format` - 自动格式化代码（Black + isort）
- `make format-check` - 检查格式但不修改文件
- `make format-advanced` - 高级清理（删除未使用导入 + 语法升级）

### 代码检查
- `make lint` - 运行 flake8 + mypy 检查
- `make security` - 安全检查（bandit + safety）
- `make check` - 完整检查（格式化 + 检查）
- `make check-strict` - 严格检查（不修改文件）
- `make check-all` - 全面检查（包括测试和安全）

### CI/CD 检查
- `make ci-check` - 适用于持续集成的检查流程
- 包含格式检查、代码检查、安全检查、测试覆盖率

## 测试流程
- `make test` - 运行所有测试
- `make test-cov` - 运行测试并生成 HTML 覆盖率报告
- 测试文件位于 [tests/](mdc:tests) 目录
- 使用 pytest + pytest-asyncio 进行异步测试
- 测试配置在 [pytest.ini](mdc:pytest.ini) 和 [conftest.py](mdc:tests/conftest.py)

## Pre-commit 钩子
- `make pre-commit-install` - 安装 Git 钩子
- `make pre-commit-run` - 手动运行所有钩子
- `make pre-commit-update` - 更新钩子版本
- 配置文件：[.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)

## Docker 开发
- `make docker-build` - 构建镜像
- `make docker-run` - 启动容器（使用 docker-compose）
- `make docker-stop` - 停止容器
- `make docker-logs` - 查看容器日志
- 配置文件：[docker-compose.yml](mdc:docker-compose.yml)、[Dockerfile](mdc:Dockerfile)

## 数据库管理
- 使用 SQLite 开发，PostgreSQL 生产
- 数据库文件：`fivjourney_tools.db`、`travel_tracker.db`
- 支持 Alembic 迁移：`make db-migrate`、`make db-upgrade`

## 工具配置文件
- [pyproject.toml](mdc:pyproject.toml) - 项目配置、依赖、工具设置
- [.flake8](mdc:.flake8) - Flake8 配置
- [mypy.ini](mdc:mypy.ini) - MyPy 类型检查配置
- [.bandit](mdc:.bandit) - 安全检查配置
- [.gitignore](mdc:.gitignore) - Git 忽略文件

## 推荐开发流程
1. 开始开发前：`make install-dev && make pre-commit-install`
2. 开发过程中：`make dev` 启动服务器
3. 提交前检查：`make check-all`
4. 提交代码：Git 会自动运行 pre-commit 钩子
5. CI/CD：使用 `make ci-check` 进行持续集成检查

## 清理命令
- `make clean` - 清理临时文件（.pyc、__pycache__、日志等）

