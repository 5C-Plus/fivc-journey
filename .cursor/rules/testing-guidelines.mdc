---
description: 
globs: 
alwaysApply: false
---
# 测试指导规则

## 测试文件结构
测试文件位于 [tests/](mdc:tests) 目录：

### 测试文件组织
- [tests/conftest.py](mdc:tests/conftest.py) - pytest 配置和共享 fixtures
- [tests/test_models.py](mdc:tests/test_models.py) - 数据库模型测试
- [tests/test_auth.py](mdc:tests/test_auth.py) - 认证相关测试
- [tests/test_users.py](mdc:tests/test_users.py) - 用户管理测试
- [tests/test_travel_plans.py](mdc:tests/test_travel_plans.py) - 旅行计划测试
- [tests/test_itineraries.py](mdc:tests/test_itineraries.py) - 行程安排测试
- [tests/test_expenses.py](mdc:tests/test_expenses.py) - 费用管理测试
- [tests/test_travel_logs.py](mdc:tests/test_travel_logs.py) - 旅行日志测试

## 测试配置
### pytest 配置
配置文件：[pytest.ini](mdc:pytest.ini)
```ini
[tool:pytest]
minversion = 7.0
addopts = -ra -q --strict-markers --strict-config
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]
```

### 测试命令
- `make test` - 运行所有测试
- `make test-cov` - 运行测试并生成覆盖率报告
- `pytest tests/test_specific.py` - 运行特定测试文件
- `pytest tests/test_specific.py::test_function` - 运行特定测试函数
- `pytest -m "not slow"` - 跳过慢速测试
- `pytest -m integration` - 只运行集成测试

## 测试类型分类
### 单元测试
- 测试单个函数或方法
- 不依赖外部服务
- 运行速度快
- 覆盖边界条件和异常情况

### 集成测试
- 测试多个组件协作
- 包含数据库操作
- 测试完整的业务流程
- 使用 `@pytest.mark.integration` 标记

### API 测试
- 测试 HTTP 端点
- 使用 FastAPI TestClient
- 测试请求/响应格式
- 验证状态码和错误处理

## 测试数据管理
### Fixtures 使用
```python
# conftest.py 中的共享 fixtures
@pytest.fixture
async def async_client():
    """异步测试客户端"""
    async with AsyncClient(app=app, base_url="http://test") as ac:
        yield ac

@pytest.fixture
async def test_user(async_session):
    """测试用户"""
    user_data = {
        "username": "testuser",
        "email": "test@example.com",
        "password": "testpass123"
    }
    # 创建测试用户逻辑
    yield user

@pytest.fixture
async def auth_headers(test_user):
    """认证头部"""
    token = create_access_token(data={"sub": test_user.username})
    return {"Authorization": f"Bearer {token}"}
```

### 测试数据库
- 使用独立的测试数据库
- 每个测试后清理数据
- 使用事务回滚保证隔离
- 测试数据要有代表性

## 测试编写规范
### 测试函数命名
```python
# 好的命名
def test_create_travel_plan_success():
    """测试成功创建旅行计划"""
    pass

def test_create_travel_plan_invalid_dates():
    """测试创建旅行计划时日期无效"""
    pass

def test_get_travel_plan_not_found():
    """测试获取不存在的旅行计划"""
    pass

def test_update_travel_plan_unauthorized():
    """测试无权限更新旅行计划"""
    pass
```

### 测试结构（AAA 模式）
```python
async def test_create_travel_plan_success(async_client, auth_headers):
    # Arrange - 准备测试数据
    travel_plan_data = {
        "name": "测试旅行计划",
        "destination": "北京",
        "start_date": "2024-06-01",
        "end_date": "2024-06-07"
    }
    
    # Act - 执行操作
    response = await async_client.post(
        "/api/v1/travel-plans/",
        json=travel_plan_data,
        headers=auth_headers
    )
    
    # Assert - 验证结果
    assert response.status_code == 201
    data = response.json()
    assert data["name"] == travel_plan_data["name"]
    assert data["destination"] == travel_plan_data["destination"]
    assert "id" in data
    assert "created_at" in data
```

## API 测试模式
### 成功场景测试
```python
async def test_list_travel_plans_success(async_client, auth_headers, test_travel_plan):
    response = await async_client.get(
        "/api/v1/travel-plans/",
        headers=auth_headers
    )
    
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    assert len(data) >= 1
```

### 错误场景测试
```python
async def test_get_travel_plan_not_found(async_client, auth_headers):
    response = await async_client.get(
        "/api/v1/travel-plans/99999",
        headers=auth_headers
    )
    
    assert response.status_code == 404
    assert "不存在" in response.json()["detail"]

async def test_create_travel_plan_unauthorized(async_client):
    response = await async_client.post(
        "/api/v1/travel-plans/",
        json={"name": "测试"}
    )
    
    assert response.status_code == 401
```

### 数据验证测试
```python
async def test_create_travel_plan_invalid_data(async_client, auth_headers):
    invalid_data = {
        "name": "",  # 空名称
        "start_date": "2024-06-07",
        "end_date": "2024-06-01"  # 结束日期早于开始日期
    }
    
    response = await async_client.post(
        "/api/v1/travel-plans/",
        json=invalid_data,
        headers=auth_headers
    )
    
    assert response.status_code == 422
```

## 模型测试
### 模型创建测试
```python
async def test_create_user_model(async_session):
    user_data = {
        "username": "testuser",
        "email": "test@example.com",
        "hashed_password": "hashedpass"
    }
    
    user = User(**user_data)
    async_session.add(user)
    await async_session.commit()
    await async_session.refresh(user)
    
    assert user.id is not None
    assert user.username == user_data["username"]
    assert user.created_at is not None
```

### 关系测试
```python
async def test_user_travel_plans_relationship(async_session, test_user):
    travel_plan = TravelPlan(
        name="测试计划",
        user_id=test_user.id
    )
    async_session.add(travel_plan)
    await async_session.commit()
    
    # 测试关系
    await async_session.refresh(test_user)
    assert len(test_user.travel_plans) == 1
    assert test_user.travel_plans[0].name == "测试计划"
```

## 覆盖率要求
### 覆盖率目标
- 整体代码覆盖率 ≥ 80%
- 核心业务逻辑覆盖率 ≥ 90%
- API 端点覆盖率 = 100%
- 模型和 Schema 覆盖率 ≥ 85%

### 覆盖率报告
```bash
# 生成 HTML 覆盖率报告
make test-cov

# 查看覆盖率报告
open htmlcov/index.html
```

### 覆盖率配置
配置在 [pyproject.toml](mdc:pyproject.toml)：
```toml
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
```

## 测试最佳实践
### 测试隔离
- 每个测试独立运行
- 不依赖其他测试的结果
- 使用 fixtures 准备测试数据
- 测试后清理数据

### 测试数据
- 使用有意义的测试数据
- 测试边界条件
- 测试异常情况
- 避免硬编码数据

### 异步测试
```python
import pytest

@pytest.mark.asyncio
async def test_async_function():
    result = await some_async_function()
    assert result is not None
```

### 参数化测试
```python
@pytest.mark.parametrize("input_data,expected", [
    ({"name": "test1"}, 201),
    ({"name": ""}, 422),
    ({}, 422),
])
async def test_create_with_various_inputs(async_client, input_data, expected):
    response = await async_client.post("/api/v1/resource/", json=input_data)
    assert response.status_code == expected
```

## 持续集成
- 所有 PR 必须通过测试
- 测试失败不能合并代码
- 定期运行完整测试套件
- 监控测试覆盖率变化

